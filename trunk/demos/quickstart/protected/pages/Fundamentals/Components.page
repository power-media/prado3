<com:TContent ID="body" >
<h1>Components</h1>
<p>
A component is an instance of <code>TComponent</code> or its child class. The base class <code>TComponent</code> implements the mechanism of component properties and events.
</p>

<h2>Component Properties</h2>
<p>
A component property can be viewed as a public variable describing a specific aspect of the component, such as the background color, the font size, etc. A property is defined by the existence of a getter and/or a setter method in the component class. For example, in <code>TControl</code>, we have
<pre class="source">
class TControl extends TComponent {
    public function getID() {
        ...
    }
    public function setID($value) {
        ...
    }
}
</pre>
This defines a property named <code>ID</code>. Reading the property (e.g. <code>echo $component-&gt;ID;</code>) is equivalent to invoking the getter method (e.g. <code>echo $component-&gt;getID();</code>); and writing the property (e.g. <code>$component-&gt;ID='Button';</code>) is equivalent to invoking the setter method (e.g. <code>$component-&gt;setID('Button');</code>).
</p>
<p>
A property is read-only if it has a getter method but no setter method. Since PHP method names are case-insensitive, property names are also case-insensitive. A component class inherits all its ancestor classes' properties.
</p>

<h2>Component Events</h2>
<p>
Component events are special properties that take method names as their values. Attaching (setting) a method to an event will hook up the method to the places at which the event is raised. Therefore, the behavior of a component can be modified in a way that may not be foreseen during the development of the component.
</p>
<p>
A component event is defined by the existence of an <code>on</code>-method. For example, in <code>TButton</code>, we have
<pre class="source">
class TButton extends TWebControl {
    public function onClick($param) {
        ...
    }
}
</pre>
This defines an event named <code>Click</code>, and a handler can be attached to the event using one of the following ways,
<pre class="source">
$button-&gt;Click=$callback;
$button-&gt;Click-&gt;add($callback);
$button-&gt;Click[]=$callback;
$button-&gt;attachEventHandler('Click',$callback);
</pre>
where <code>$callback</code> refers to a valid PHP callback (e.g. a function name, a class method <code>array($object,'method')</code>, etc.)
</p>

</com:TContent>